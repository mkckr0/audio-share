name: Release

on:
  workflow_dispatch:

jobs:
  apply_version:
    name: Apply Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: |
          bash ./scripts/apply_version.sh
      - run: |
          git config user.name mkckr0
          git config user.email 26296627+mkckr0@users.noreply.github.com
          if [ -z "$(git status -s)" ]; then exit 0; fi
          git add .
          git commit -m "Apply version $(bash ./script/get_version.sh -n)"
          git push

  build_app:
    name: Build Android App
    needs: [apply_version]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client-android
    outputs:
      hash: ${{ steps.get_hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Create relese.jks
        run: mkdir ~/.android && echo "$release_jks" | base64 -d > ~/.android/release.jks
        env:
          release_jks: ${{ secrets.RELEASE_JKS }}
      - name: Create keystore.properties
        run: echo -e "storeFile=$(ls ~/.android/release.jks)\nstorePassword=${store_pass}\nkeyAlias=${key_alias}\nkeyPassword=${key_pass}\n" > keystore.properties
        env:
          store_pass: ${{ secrets.STORE_PASS }}
          key_alias: ${{ secrets.KEY_ALIAS }}
          key_pass: ${{ secrets.KEY_PASS }}

      - run: chmod +x gradlew
      - run: ./gradlew :app:assembleRelease
      - run: ./gradlew :app:signingReport

      - name: Get versionName
        run: sed -En 's/versionName\s*=\s*"([^"]*)"/version=\1/p' app/build.gradle.kts | tee $GITHUB_OUTPUT
        id: get_version

      - name: Get versionCode
        run: sed -En 's/versionCode\s*=\s*([0-9]*)/version_code=\1/p' app/build.gradle.kts | tee $GITHUB_OUTPUT
        id: get_version_code

      - uses: actions/upload-artifact@v3
        with:
          name: app
          path: app/build/outputs/apk/release/*.apk

      - name: Get sha256sum
        run: sha256sum app/build/outputs/apk/release/*.apk | awk '{ printf "hash=%s", $1 }' | tee $GITHUB_OUTPUT
        id: get_hash

  build_server_mfc:
    name: Build server-mfc
    needs: [apply_version]
    runs-on: windows-latest
    defaults:
      run:
        working-directory: server-mfc
    outputs:
      hash: ${{ steps.get_hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v3
      - uses: microsoft/setup-msbuild@v1
      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: ${{ github.workspace }}
          vcpkgCommitId: e57b2167e66c847f991bd6bce1355b85acd944e8
      - run: vcpkg integrate install
      - run: vcpkg install asio protobuf spdlog
        env:
          VCPKG_DEFAULT_TRIPLET: x64-windows-static-md
      - run: msbuild /m /p:Configuration=Release,Platform=x64
      - uses: actions/upload-artifact@v3
        with:
          name: server
          path: x64/Release/*.exe
      - name: Get sha256num
        run: sha256sum x64/Release/*.exe | awk '{ printf "hash=%s", $1 }' | tee $GITHUB_OUTPUT
        id: get_hash
        shell: bash

  build_server_core:
    name: Build server-core
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        include:
          - os: windows-latest
            vcpkg_triplet: x64-windows-static-md
            cmake_preset: windows-Release
          - os: ubuntu-latest
            vcpkg_triplet: x64-linux
            cmake_preset: linux-Release

    needs: [apply_version]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: server-core
    outputs:
      hash: ${{ steps.get_hash.outputs.hash }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Linux Deps
        run: sudo apt install libpipewire-0.3-dev
      - uses: lukka/get-cmake@latest
      - uses: lukka/run-vcpkg@v11
        with:
          vcpkgCommitId: e57b2167e66c847f991bd6bce1355b85acd944e8
      - run: vcpkg integrate install
      - run: vcpkg install asio protobuf spdlog cxxopts
        env:
          VCPKG_DEFAULT_TRIPLET: ${{ matrix.vcpkg_triplet }}
      - uses: lukka/run-cmake@v10
        with:
          configurePreset: ${{ matrix.cmake_preset }}
          configurePresetAdditionalArgs: "['--target install']"
      - uses: actions/upload-artifact@v3
        with:
          name: server-core_${{ matrix.os }}
          path: out/install/${{ matrix.cmake_preset }}/bin/*
      - name: Get sha256num
        run: sha256sum out/install/${{ matrix.cmake_preset }}/bin/* | awk '{ printf "hash=%s", $1 }' | tee $GITHUB_OUTPUT
        id: get_hash
        shell: bash

  create_release:
    name: Create Release
    needs: [build_app, build_server_mfc, build_server_core]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - run: chmod +x ./script/get_version.sh
      - uses: actions/download-artifact@v2
        with:
          name: app
      - uses: actions/download-artifact@v2
        with:
          name: server
      - name: Generate release notes
        run: 'echo -e "$(cat ./metadata/en-US/changelogs/$(bash ./script/get_version.sh -c).txt)\n---\nsha256sum:\n$(ls *.apk): ${app_hash}\n$(ls *.exe): ${server_hash}\n" > notes'
        env:
          app_hash: ${{ needs.build_app.outputs.hash }}
          server_hash: ${{ needs.build_server.outputs.hash }}
      - name: Create Github Release
        run: |
          version=$(bash ./script/get_version.sh -n)
          gh release create "v$version" -d -F notes -t "v$version" *.apk *.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
